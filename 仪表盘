#include "cardisp.h"



const  int CarDisp::radius =150 ;   //半径
const  int CarDisp::maxv = 500;
const  int CarDisp::minv = 0;



CarDisp::CarDisp(QWidget *parent)
    : QWidget(parent)
{
    Values=0;
    
}

CarDisp::~CarDisp()
{
}

void CarDisp::setvalues(qreal iValues)
{
    Values = iValues;
    update();
}
void CarDisp::paintEvent(QPaintEvent *event) 
{
    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing);
    QPoint center(width()/2,height()/2);            //获取窗口的中心位置
    painter.save();
    
    //绘制背景圆形
    painter.translate(center);
    painter.setPen(Qt::NoPen);
    painter.setBrush(QColor(142,142,142));
    const int bkRadius=radius+3;    //设置背景半径 
    painter.drawEllipse(QPoint(),bkRadius,bkRadius);

    //绘制刻度线
    painter.rotate(-135);
    const int longstep = 10;    //设置步长
    const int shortstep = 50;   //每个隔50

    for(int i=0;i<=shortstep;i++)
    {
        //前面80%刻度线为绿色，后面20%刻度为红色
        painter.setPen((i<shortstep*0.8)?QColor(32,243,32):QColor(243,32,32));

        if(i%(shortstep/longstep)!=0)       //画短刻度线
        {
            QPoint p1(0,-(radius-8));
            QPoint p2(0,-radius);
            painter.drawLine(p1,p2);
        }
        else                                //画长刻度线
        {
            QPoint p1(0,-(radius-20));
            QPoint p2(0,-radius);
            painter.drawLine(p1,p2);
        }
        painter.rotate(270.0/shortstep);
    }
    //绘制表盘名称和背景矩形
    painter.restore();
    QFontMetrics fm = painter.fontMetrics();
    int tx=center.x();
    int ty=int(center.y()+(radius/1.4142));

    QString title=QStringLiteral("仪表盘");
    QSize tsz=fm.size(0,title);

    QRect trect(QPoint(tx-tsz.width()/2,ty-tsz.height()/2),tsz);
    painter.setPen(QColor(127,127,127));
    painter.setBrush(QColor(163,163,163));
    painter.drawRoundRect(trect.adjusted(-6,-4,6,4),3,3);
    painter.setPen(QColor(243,243,243));
    painter.setBrush(Qt::NoBrush);
    painter.drawText(trect,title);  //绘制每一个长刻度对应的文字
    painter.setPen(QColor(243,243,243));
    const int hand=radius-21;

    for(int i=0;i<=longstep;i++)
    {
        qreal angle=qDegreesToRadians(-135.0+i*(270.0/longstep));
        QString etext=QString::number(minv+i*(maxv-minv)/longstep);
        QPointF dirvec(qSin(angle),-qCos(angle));
        QPointF ecenter(center.x()+hand*dirvec.x(),center.y()+hand*dirvec.y());
        QSize esz=fm.size(0,etext);
        QRectF erect(QPointF(ecenter.x()-esz.width()/2,ecenter.y()-esz.height()/2),esz);
        painter.drawText(erect,etext);

    }

    //仪表盘指针绘制
    painter.save();
    QPoint triangle[]={
        {-5,0},
        {0,25-radius},
        {5,0}
    };

    qreal degree= -135.0+270.0*(Values-minv)/(maxv-minv);
    painter.translate(center);
    painter.rotate(degree);
    painter.setPen(Qt::NoPen);
    painter.setBrush(Qt::red);
    painter.drawPolygon(triangle,3);        //多边形三个角
    painter.setPen(QPen(QColor(214,0,0),2));
    painter.drawEllipse(QPoint(),7,7);




}
